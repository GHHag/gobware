syntax = "proto3";

package main;

option go_package = "./gobwarerpc";

service GobwareService {
	// rpc CreateACL (CreateACLRequest) returns (CreateACLResponse);
	rpc AddACLRule (AddACLRuleRequest) returns (AddACLRuleResponse);
	// rpc SetACL (SetACLRequest) returns (SetACLResponse);
	rpc CreateToken (CreateTokenRequest) returns (CreateTokenResponse);
	rpc CreateTokenPair (CreateTokenPairRequest) returns (CreateTokenPairResponse);
	rpc CheckAccess (CheckAccessRequest) returns (CheckAccessResponse);
	rpc CheckToken (CheckTokenRequest) returns (CheckTokenResponse);
	//rpc Adapt () returns ();
}

// message CreateACLRequest {
// 	string roleKey = 1;
// }

// message CreateACLResponse {
// 	bool successful = 1;
// }

message AddACLRuleRequest {
	string role = 1;
	string route = 2;
	repeated string httpMethods = 3;
	// string httpMethod = 3;
}

// message ACLRule {
// 	string httpMethod = 1;
// 	bool access = 2;
// }

message AddACLRuleResponse {
	// map <string, ACLRule> ACLRules = 1;
	bool successful = 1;
}

// message SetACLRequest {
// 	// Is the function to set acl needed?
// 	repeated AddACLRuleResponse ACLRuleResponse = 1;
// }
//
// message SetACLResponse {
// 	bool successful = 1;
// }

message CreateTokenRequest {
	int64 expires = 1;
	map <string, string> data = 2;
}

message CreateTokenResponse {
	string encodedToken = 1;
}

message CreateTokenPairRequest {
	int64 expires = 1;
	map <string, string> data = 2;
}

message CreateTokenPairResponse {
	string encodedAccessToken = 1;
	string encodedRefreshToken = 2;
}

message CheckAccessRequest {
	string encodedToken = 1;
	map <string, string> data = 2;
}

message CheckAccessResponse {
	bool access = 1;
}

message CheckTokenRequest {
	string encodedToken = 1;
	map <string, string> data = 2;
}

message CheckTokenResponse {
	bool access = 1;
}

// message Adapt {
//
// }
